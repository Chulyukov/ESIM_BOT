import asyncio
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bnesim_api import BnesimApi
from config import Config
from db.db_queries import db_get_all_cli, db_get_hidden_esims

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API BNESIM
bnesim_api = BnesimApi()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å CLI
users_list = db_get_all_cli()


async def send_remaining_info():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–º—Å—è –ø–∞–∫–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."""
    for user in users_list:
        chat_id, cli = user[0], user[1]
        hidden_esims = db_get_hidden_esims(chat_id)
        iccids_dict = bnesim_api.get_iccids_of_user(cli)

        if iccids_dict["length"] > 0:
            for iccid in iccids_dict["iccids"]:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ eSIM
                if hidden_esims and iccid in hidden_esims.get("esims", []):
                    continue

                esim_info = bnesim_api.get_esim_info(iccid)

                # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ eSIM –µ—Å—Ç—å –∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫ <= 1 –ì–ë
                if esim_info and esim_info['remaining_data'] <= 1.0:
                    kb = InlineKeyboardBuilder().add(
                        InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", callback_data="top_up_choose_payment_method_"),
                        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å eSIM", callback_data=f"delete_esim_{iccid}"),
                    ).adjust(1).as_markup()

                    try:
                        await Config.BOT.send_message(
                            chat_id=chat_id,
                            text=(
                                f"ü™´ –£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
                                f" –Ω–∞ eSIM ‚Äú`{esim_info['country']} - {iccid[-4:]}`‚Äù"
                                " (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 1 –ì–ë)."
                                "\n\nüëá –ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ,"
                                " —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏"
                                " *–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å* –Ω–µ–Ω—É–∂–Ω—É—é eSIM. –£–¥–∞–ª–µ–Ω–Ω–∞—è eSIM"
                                " –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –Ω–æ"
                                " –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º."
                            ),
                            reply_markup=kb,
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é chat_id={chat_id}: {e}")


# –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if __name__ == "__main__":
    asyncio.run(send_remaining_info())