from aiogram import Router, F, types
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton

from bnesim_api import BnesimApi
from config import Config
from core.helpful_methods import get_username, get_plan_prices, build_keyboard, prepare_payment_order, \
    handle_payment_order, handle_first_payment_order, choose_direction
from db.countries.db_countries import db_get_20_countries
from db.db_buy_esim import db_get_emoji_from_two_tables, db_get_ru_name_from_two_tables
from db.regions.regions import db_get_regions
from db.users.db_cli import db_get_cli
from db.users.db_data import db_update_data_country, db_get_all_data
from db.users.db_top_up_data import db_get_all_top_up_data, db_get_top_up_flag

router = Router()


@router.callback_query(F.data == "buy_esim")
@router.message(Command("buy_esim"))
async def buy_esim(msg: Message | CallbackQuery):
    await choose_direction(msg)


@router.callback_query(F.data == "popular_directions")
async def choose_popular_direction(callback: CallbackQuery):
    kb = build_keyboard([
        InlineKeyboardButton(text="üáπüá∑ –¢—É—Ä—Ü–∏—è", callback_data="choose_plan_rub_turkey"),
        InlineKeyboardButton(text="üáπüá≠ –¢–∞–π–ª–∞–Ω–¥", callback_data="choose_plan_rub_thailand"),
        InlineKeyboardButton(text="üá¶üá™ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ê—Ä–∞–±—Å–∫–∏–µ –≠–º–∏—Ä–∞—Ç—ã", callback_data="choose_plan_rub_united_arab_emirates"),
        InlineKeyboardButton(text="üá™üá¨ –ï–≥–∏–ø–µ—Ç", callback_data="choose_plan_rub_egypt"),
        InlineKeyboardButton(text="üá¨üá∑ –ì—Ä–µ—Ü–∏—è", callback_data="choose_plan_rub_greece"),
        InlineKeyboardButton(text="üáªüá≥ –í—å–µ—Ç–Ω–∞–º", callback_data="choose_plan_rub_vietnam"),
        InlineKeyboardButton(text="üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", callback_data="choose_plan_rub_spain"),
        InlineKeyboardButton(text="üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è", callback_data="choose_plan_rub_indonesia"),
        InlineKeyboardButton(text="üá®üá≥ –ö–∏—Ç–∞–π", callback_data="choose_plan_rub_china"),
        InlineKeyboardButton(text="üá®üáæ –ö–∏–ø—Ä", callback_data="choose_plan_rub_cyprus"),
        InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"),
    ], (2, 2, 2, 2, 2, 1))
    await callback.message.edit_text(
        text="\n\nüÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
             "\n\n*üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.*",
        reply_markup=kb,
        disable_web_page_preview=True)


@router.callback_query(F.data.startswith("countries_"))
async def choose_concrete_direction(callback: CallbackQuery):
    pages_to_skip = int(callback.data[-1])
    countries = db_get_20_countries(pages_to_skip)
    next_countries = db_get_20_countries(pages_to_skip + 1)
    buttons = [
        InlineKeyboardButton(
            text=f"{emoji} {ru_name.title()}",
            callback_data=f"choose_plan_rub_{name.replace(' ', '_')}"
        )
        for name, ru_name, emoji in countries
    ]

    if pages_to_skip > 0 and len(next_countries) != 0:
        buttons.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"countries_{str(pages_to_skip - 1)}"))
        buttons.append(InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª—å—à–µ", callback_data=f"countries_{str(pages_to_skip + 1)}"))
        buttons.append(InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"))
        kb = build_keyboard(buttons, (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1))
    elif pages_to_skip > 0 and len(next_countries) == 0:
        buttons.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"countries_{str(pages_to_skip - 1)}"))
        buttons.append(InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"))
        kb = build_keyboard(buttons, (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1))
    else:
        buttons.append(InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª—å—à–µ", callback_data=f"countries_{str(pages_to_skip + 1)}"))
        buttons.append(InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"))
        kb = build_keyboard(buttons, (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1))
    await callback.message.edit_text(
        text="üÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
             "\n\n*üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É.*",
        reply_markup=kb,
        disable_web_page_preview=True)


@router.callback_query(F.data == "regions")
async def choose_region(callback: CallbackQuery):
    regions = db_get_regions()
    buttons = [
        InlineKeyboardButton(
            text=f"{emoji} {ru_name.title()}",
            callback_data=f"choose_plan_rub_{name.replace(' ', '_')}"
        )
        for name, ru_name, emoji in regions
    ]
    buttons.append(InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"))
    kb = build_keyboard(buttons, (1,))

    await callback.message.edit_text(
        text="*üåç –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤—Ö–æ–¥—è—Ç –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ eSIM.*"
             "\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –º–∏—Ä–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π!"
             "\n\n*üì± –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–µ –ø–æ —Å—Å—ã–ª–∫–µ:*"
             "\n[–ü–∞–∫–µ—Ç—ã eSIM –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã](https://telegra.ph/Pakety-eSIM-dlya-raznyh-regionov-dostupnye-strany-10-06)"
             "\n\nüÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
             "\n\n*‚úàÔ∏è –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!*",
        reply_markup=kb, disable_web_page_preview=True)


@router.callback_query(F.data == "search")
async def search(callback: CallbackQuery):
    await callback.message.answer("‚å®Ô∏è –í –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


# @router.callback_query(F.data.startswith("choose_payment_method_"))
# async def choose_payment_method(callback: CallbackQuery):
#     country = callback.data.split("choose_payment_method_")[1]
#     emoji = db_get_emoji_from_two_tables(country.replace("_", " "))
#     ru_name = db_get_ru_name_from_two_tables(country.replace("_", " "))
#     text = (f"*üìç –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - *`{emoji}{ru_name.title()}`"
#             f"\n\n*üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.*")
#     if country == "global":
#         text = ("*üåç –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –ø–æ–º–æ—â—å—é eSIM –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞?* –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–µ–π, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–∞–Ω—ã, –≤—Ö–æ–¥—è—â–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ eSIM-–ø–∞–∫–µ—Ç—ã, –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
#             "\n\n*üì± –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ –∑–¥–µ—Å—å:*"
#             "\n[–ì–ª–æ–±–∞–ª—å–Ω—ã–µ eSIM-–ø–∞–∫–µ—Ç—ã: –°—Ç—Ä–∞–Ω—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è](https://telegra.ph/Globalnye-eSIM-pakety-Strany-i-osobennosti-podklyucheniya-10-06)"
#             "\n\nüÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
#             "\n\n*‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏!*")
#     db_update_data_country(callback.message.chat.id, callback.data.split("_")[-1])
#     buttons = [
#         InlineKeyboardButton(text="üí≥ –†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f"choose_plan_rub_{country}"),
#         InlineKeyboardButton(text="‚≠êÔ∏è Telegram Stars", callback_data=f"choose_plan_star_{country}"),
#         InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim")
#     ]
#     kb = build_keyboard(buttons, (1,))
#     await callback.message.edit_text(text=text,
#                                      reply_markup=kb,
#                                      disable_web_page_preview=True)


@router.callback_query(F.data.startswith("choose_plan_rub_"))
async def choose_plan_rub(callback: CallbackQuery):
    country = callback.data.split("choose_plan_rub_")[1]
    db_update_data_country(callback.message.chat.id, country.replace("_", " "))
    prices = get_plan_prices("RUB", callback.message.chat.id)
    buttons = [
        InlineKeyboardButton(text=f"{gb} –ì–ë - {price} RUB", callback_data=f"pay_rub_{gb}")
        for gb, price in prices.items()
    ]
    buttons.append(InlineKeyboardButton(text="‚è™ –ö –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="buy_esim"))
    kb = build_keyboard(buttons, (2, 2, 1))
    await callback.message.edit_text(text="üí≥ –û–ø–ª–∞—á–∏–≤–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å"
                                          " [—É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞](https://telegra.ph/Kak-proishodit-oplata-v-bote-09-05)."
                                          "\n\nüÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
                                          "\n\n*üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.*",
                                     reply_markup=kb,
                                     disable_web_page_preview=True)


# @router.callback_query(F.data.startswith("choose_plan_star_"))
# async def choose_plan_star_card(callback: CallbackQuery):
#     country = callback.data.split("choose_plan_star_")[1]
#     db_update_data_country(callback.message.chat.id, country.replace("_", " "))
#     prices = get_plan_prices("XRT", callback.message.chat.id)
#     buttons = [
#         InlineKeyboardButton(text=f"{gb} –ì–ë - {price} STARS", callback_data=f"pay_stars_{gb}")
#         for gb, price in prices.items()
#     ]
#     buttons.append(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"choose_payment_method_{country}"))
#     kb = build_keyboard(buttons, (2, 2, 1))
#     await callback.message.edit_text(
#         text="üÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞](https://t.me/esim_unity_support)."
#              "\n\n*üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.*",
#         reply_markup=kb,
#         disable_web_page_preview=True)


@router.callback_query(F.data.startswith("pay_rub_"))
async def pay_rub(callback: CallbackQuery):
    await prepare_payment_order(callback, "RUB")


# @router.callback_query(F.data.startswith("pay_stars_"))
# async def pay_star(callback: CallbackQuery):
#     await prepare_payment_order(callback, "XTR")


# @router.pre_checkout_query(lambda query: True)
# async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
#     await Config.BOT.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
#
#
# @router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: types.Message):
#     chat_id = message.chat.id
#     bnesim = BnesimApi()
#     cli = db_get_cli(chat_id)
#     data = db_get_all_data(chat_id)
#     top_up_data = db_get_all_top_up_data(chat_id)
#     downloading_message = await message.answer("*üöÄ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞...*")
#     iccids_list = bnesim.get_iccids_of_user(cli)
#     top_up_flag = db_get_top_up_flag(chat_id)
#     if cli is None:
#         cli = bnesim.activate_user(f"{get_username(message)}_{chat_id}")
#         await handle_first_payment_order(cli, chat_id, data, bnesim, downloading_message)
#     else:
#         await handle_payment_order(cli, bnesim, data, top_up_data,
#                                    top_up_flag, chat_id, downloading_message, iccids_list)
#
#     await handle_payment_order(cli, bnesim, data, top_up_data, top_up_flag, chat_id, downloading_message, iccids_list)
