from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import Config


async def buy_esim_service(msg: Message | CallbackQuery):
    kb = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text="üáπüá∑–¢—É—Ä—Ü–∏—è", callback_data="choose_payment_method_turkey"),
        InlineKeyboardButton(text="üá¶üá™–û–ê–≠", callback_data="choose_payment_method_uae"),
        InlineKeyboardButton(text="üáπüá≠–¢–∞–π–ª–∞–Ω–¥", callback_data="choose_payment_method_thailand"),
        InlineKeyboardButton(text="üá¨üá™–ì—Ä—É–∑–∏—è", callback_data="choose_payment_method_georgia"),
        InlineKeyboardButton(text="üá™üá¨–ï–≥–∏–ø–µ—Ç", callback_data="choose_payment_method_egypt"),
    ).adjust(1, 2).as_markup()

    message_text = ("–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É,"
                    " *–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ esim –Ω–∞ –º–∞—à —Å–º–∞—Ä—Ç—Ñ–æ–Ω*."
                    "\n–°–ø–∏—Å–æ–∫ –¥–µ–≤–∞–π—Å–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é,"
                    " –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: *—Å—Å—ã–ª–∫–∞ –Ω–∞ Telegraph*"
                    "\n\nüëá*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.*")

    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text=message_text, reply_markup=kb, disable_web_page_preview=True)
    elif isinstance(msg, Message):
        await msg.answer(text=message_text, reply_markup=kb, disable_web_page_preview=True)


async def choose_payment_method_service(callback: CallbackQuery):
    kb = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text="üí≥ –†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="choose_plan_russian_card"),
        InlineKeyboardButton(text="‚≠êÔ∏è Telegram Stars", callback_data="choose_plan_star"),
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="buy_esim"),
    ).adjust(1).as_markup()
    await callback.message.edit_text("*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.*", reply_markup=kb)


async def choose_plan_russian_service(callback: CallbackQuery):
    kb = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=f"1 –ì–ë - {Config.PRICE_1_GB_RUB} RUB", callback_data="pay_russian_card_1"),
        InlineKeyboardButton(text=f"3 –ì–ë - {Config.PRICE_3_GB_RUB} RUB", callback_data="pay_russian_card_3"),
        InlineKeyboardButton(text=f"5 –ì–ë - {Config.PRICE_5_GB_RUB} RUB", callback_data="pay_russian_card_5"),
        InlineKeyboardButton(text=f"10 –ì–ë - {Config.PRICE_10_GB_RUB} RUB", callback_data="pay_russian_card_10"),
        InlineKeyboardButton(text=f"20 –ì–ë - {Config.PRICE_20_GB_RUB} RUB", callback_data="pay_russian_card_20"),
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="choose_payment_method_"),
    ).adjust(2, 2, 1, 1).as_markup()
    await callback.message.edit_text(text="*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –Ω–∞–±–æ—Ä –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞.*", reply_markup=kb)


async def choose_plan_star_service(callback: CallbackQuery):
    kb = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=f"1 –ì–ë - {Config.PRICE_1_GB_STAR} STARS", callback_data="pay_star_1"),
        InlineKeyboardButton(text=f"3 –ì–ë - {Config.PRICE_3_GB_STAR} STARS", callback_data="pay_star_3"),
        InlineKeyboardButton(text=f"5 –ì–ë - {Config.PRICE_5_GB_STAR} STARS", callback_data="pay_star_5"),
        InlineKeyboardButton(text=f"10 –ì–ë - {Config.PRICE_10_GB_STAR} STARS", callback_data="pay_star_10"),
        InlineKeyboardButton(text=f"20 –ì–ë - {Config.PRICE_20_GB_STAR} STARS", callback_data="pay_star_20"),
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="choose_payment_method_"),
    ).adjust(2, 2, 1, 1).as_markup()
    await callback.message.edit_text(text="*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –Ω–∞–±–æ—Ä –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞.*", reply_markup=kb)


async def pay_russian_card_service(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    gb_amount = callback.data[callback.data.rfind("_") + 1:]
    if gb_amount == "1":
        amount = Config.PRICE_1_GB_RUB
    elif gb_amount == "3":
        amount = Config.PRICE_3_GB_RUB
    elif gb_amount == "5":
        amount = Config.PRICE_5_GB_RUB
    elif gb_amount == "10":
        amount = Config.PRICE_10_GB_RUB
    else:
        amount = Config.PRICE_20_GB_RUB
    prices = [
        types.LabeledPrice(label="–û–ø–ª–∞—Ç–∞ esim —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π", amount=amount * 100)
    ]
    await Config.BOT.send_invoice(
        callback.from_user.id,
        title=f"{user_data["country"].capitalize()} - {gb_amount}GB",
        description="–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
                    " –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å—Ç—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–∞—Ä—Ç—ã.",
        provider_token=Config.YUKASSA_LIVE_TOKEN,
        currency="rub",
        photo_url="https://i.imgur.com/MOnD80s.jpeg",
        photo_width=416,
        photo_height=234,
        is_flexible=False,
        prices=prices,
        payload="test-invoice-payload",
        need_email=True,
        send_email_to_provider=True,
        provider_data=f"{{'receipt': {{'customer': {{'email': 'hipstakrippo@gmail.com'}},'items': [{{'description': '',"
                      f"'amount': {{'value': '{amount}', "
                      f"'currency': 'RUB'}},'vat_code': 1,'quantity'': 1}}]}}}}",
    )


async def pay_star_service(callback: CallbackQuery, state: FSMContext):
    # TODO: –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫—É–¥–∞ –∂–µ –≤—Å–µ-—Ç–∞–∫–∏ –∑–≤–µ–∑–¥—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã XD
    user_data = await state.get_data()
    gb_amount = callback.data[callback.data.rfind("_") + 1:]
    if gb_amount == "1":
        amount = Config.PRICE_1_GB_STAR
    elif gb_amount == "3":
        amount = Config.PRICE_3_GB_STAR
    elif gb_amount == "5":
        amount = Config.PRICE_5_GB_STAR
    elif gb_amount == "10":
        amount = Config.PRICE_10_GB_STAR
    else:
        amount = Config.PRICE_20_GB_STAR
    prices = [
        types.LabeledPrice(label="–û–ø–ª–∞—Ç–∞ esim —Å –ø–æ–º–æ—â—å—é Telegram Stars", amount=amount)
    ]
    await Config.BOT.send_invoice(
        callback.from_user.id,
        title=f"{user_data["country"].capitalize()} - {gb_amount}GB",
        description="–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
                    " –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å—Ç—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é Telegram Stars.",
        provider_token="",
        currency="XTR",
        photo_url="https://i.imgur.com/MOnD80s.jpeg",
        photo_width=416,
        photo_height=234,
        is_flexible=False,
        prices=prices,
        payload="test-invoice-payload",
    )
