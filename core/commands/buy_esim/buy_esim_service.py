import asyncio
import json

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bnesim import BnesimApi
from config import Config
from core.helpful_methods import get_username
from db.db_buy_esim import db_get_product_id, db_update_cli
from db.db_data import db_update_data_country, db_update_data_volume, db_get_data_country, db_get_all_data, \
    db_clean_data
from db.db_get_my_esims import db_get_cli
from db.db_top_up_data import db_get_all_top_up_data, db_clean_top_up_data


def build_keyboard(buttons, adjust_params):
    kb = InlineKeyboardBuilder()
    for button in buttons:
        kb.add(button)
    return kb.adjust(*adjust_params).as_markup()


def get_plan_prices(currency):
    if currency == 'RUB':
        return {
            3: Config.PRICE_3_GB_RUB,
            5: Config.PRICE_5_GB_RUB,
            10: Config.PRICE_10_GB_RUB,
            20: Config.PRICE_20_GB_RUB
        }
    return {
        3: Config.PRICE_3_GB_STAR,
        5: Config.PRICE_5_GB_STAR,
        10: Config.PRICE_10_GB_STAR,
        20: Config.PRICE_20_GB_STAR
    }


async def buy_esim_service(msg: Message | CallbackQuery):
    buttons = [
        InlineKeyboardButton(text="üáπüá∑–¢—É—Ä—Ü–∏—è", callback_data="choose_payment_method_turkey"),
        InlineKeyboardButton(text="üá¶üá™–û–ê–≠", callback_data="choose_payment_method_uae"),
        InlineKeyboardButton(text="üáπüá≠–¢–∞–π–ª–∞–Ω–¥", callback_data="choose_payment_method_thailand"),
        InlineKeyboardButton(text="üá¨üá™–ì—Ä—É–∑–∏—è", callback_data="choose_payment_method_georgia"),
        InlineKeyboardButton(text="üá™üá¨–ï–≥–∏–ø–µ—Ç", callback_data="choose_payment_method_egypt")
    ]
    kb = build_keyboard(buttons, (1, 2))

    message_text = (
        "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É, *–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ esim –Ω–∞ –≤–∞—à —Å–º–∞—Ä—Ç—Ñ–æ–Ω*."
        "\n–°–ø–∏—Å–æ–∫ –¥–µ–≤–∞–π—Å–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: *—Å—Å—ã–ª–∫–∞ –Ω–∞ Telegraph*"
        "\n\nüëá*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.*"
    )

    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text=message_text, reply_markup=kb, disable_web_page_preview=True)
    elif isinstance(msg, Message):
        await msg.answer(text=message_text, reply_markup=kb, disable_web_page_preview=True)


async def choose_payment_method_service(callback: CallbackQuery):
    db_update_data_country(callback.message.chat.id, callback.data.split("_")[-1])
    buttons = [
        InlineKeyboardButton(text="üí≥ –†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="choose_plan_russian_card"),
        InlineKeyboardButton(text="‚≠êÔ∏è Telegram Stars", callback_data="choose_plan_star"),
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="buy_esim")
    ]
    kb = build_keyboard(buttons, (1,))
    await callback.message.edit_text("*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.*", reply_markup=kb)


async def choose_plan_service(callback: CallbackQuery, currency):
    prices = get_plan_prices(currency)
    buttons = [
        InlineKeyboardButton(text=f"{gb} –ì–ë - {price} {currency}", callback_data=f"pay_{currency.lower()}_{gb}")
        for gb, price in prices.items()
    ]
    buttons.append(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="choose_payment_method_"))
    kb = build_keyboard(buttons, (2, 2, 1))
    await callback.message.edit_text(text="*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –æ–±—ä–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞.*", reply_markup=kb)


async def choose_plan_russian_service(callback: CallbackQuery):
    await choose_plan_service(callback, 'RUB')


async def choose_plan_star_service(callback: CallbackQuery):
    await choose_plan_service(callback, 'STARS')


async def pay_service(callback: CallbackQuery, currency):
    country = db_get_data_country(callback.message.chat.id)
    gb_amount = int(callback.data.split("_")[-1])
    db_update_data_volume(callback.message.chat.id, gb_amount)
    prices = get_plan_prices(currency)
    amount = prices[gb_amount]
    title = f"{country.capitalize()} - {gb_amount}GB"
    description = f"–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å—Ç—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é {currency}."

    invoice_params = {
        'chat_id': callback.from_user.id,
        'title': title,
        'description': description,
        'provider_token': Config.YUKASSA_LIVE_TOKEN if currency == 'RUB' else '',
        'currency': 'rub' if currency == 'RUB' else 'XTR',
        'photo_url': "https://i.imgur.com/MOnD80s.jpeg",
        'photo_width': 416,
        'photo_height': 234,
        'is_flexible': False,
        'prices': [types.LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ esim —Å –ø–æ–º–æ—â—å—é {currency}",
                                      amount=amount * 100 if currency == 'RUB' else amount)],
        'payload': "test-invoice-payload"
    }

    if currency == 'RUB':
        invoice_params.update({
            'need_email': True,
            'send_email_to_provider': True,
            'provider_data': json.dumps({
                'receipt': {
                    'customer': {'email': 'hipstakrippo@gmail.com'},
                    'items': [{
                        'description': '',
                        'amount': {'value': str(amount), 'currency': 'RUB'},
                        'vat_code': 1,
                        'quantity': 1
                    }]
                }
            })
        })
    await Config.BOT.send_invoice(**invoice_params)


async def pay_russian_card_service(callback: CallbackQuery):
    await pay_service(callback, 'RUB')


async def pay_star_service(callback: CallbackQuery):
    await pay_service(callback, 'STARS')


async def calculate_successfull_payment(message: Message):
    chat_id = message.chat.id
    bnesim = BnesimApi()
    cli = db_get_cli(chat_id)
    top_up_data = db_get_all_top_up_data(chat_id)
    downloading_message = await message.answer("üöÄ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞...")

    if cli is None:
        data = json.loads(db_get_all_data(message.chat.id))
        cli = bnesim.activate_user(f"{get_username(message)}_{chat_id}")
        product_id = db_get_product_id(data[0].capitalize(), data[1])
        db_update_cli(chat_id, cli)
        qr_code = bnesim.activate_esim(cli, product_id)
        while cli is None and qr_code is None:
            await asyncio.sleep(1)
        db_clean_data(chat_id)
        await Config.BOT.delete_message(chat_id=message.chat.id, message_id=downloading_message.message_id)
        await Config.BOT.send_photo(chat_id=message.chat.id, photo=BufferedInputFile(qr_code, "png_qr_code.png"),
                                    caption="–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ esim!")
    else:
        if len(top_up_data) > 30:
            top_up_data = json.loads(db_get_all_top_up_data(message.chat.id))
            product_id = db_get_product_id(top_up_data[1], top_up_data[2])
            iccids_map = bnesim.get_iccids_of_user(cli)
            if top_up_data[0] in iccids_map["iccids"]:
                api_answer = bnesim.top_up_existing_esim(cli, top_up_data[0], product_id)
                db_clean_top_up_data(chat_id)
                while api_answer is None:
                    await asyncio.sleep(1)
                await Config.BOT.delete_message(chat_id=message.chat.id, message_id=downloading_message.message_id)
                await message.answer("–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ esim!")
        else:
            data = json.loads(db_get_all_data(message.chat.id))
            product_id = db_get_product_id(data[0], data[1])
            qr_code = bnesim.activate_esim(cli, product_id)
            while qr_code is None:
                await asyncio.sleep(1)
            db_clean_data(chat_id)
            await Config.BOT.delete_message(chat_id=message.chat.id, message_id=downloading_message.message_id)
            await Config.BOT.send_photo(chat_id=message.chat.id, photo=BufferedInputFile(qr_code, "png_qr_code.png"),
                                        caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ–π esim!")

