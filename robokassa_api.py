import asyncio
import decimal
import hashlib
from urllib import parse

from bnesim_api import BnesimApi
from config import Config
from db.db_queries import (
    db_get_cli,
    db_get_all_data,
    db_get_chat_id_by_invoice_id,
    db_get_all_top_up_data,
    db_get_top_up_flag,
    db_get_username_by_invoice_id
)


def calculate_signature(*args) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç MD5 –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

    Args:
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏.

    Returns:
        str: MD5 –ø–æ–¥–ø–∏—Å—å.
    """
    return hashlib.md5(':'.join(str(arg) for arg in args).encode()).hexdigest()


def generate_payment_link(
        merchant_login: str,
        merchant_password_1: str,
        cost: decimal.Decimal,
        number: int,
        description: str,
        is_test: int = 0,
        robokassa_payment_url: str = 'https://auth.robokassa.ru/Merchant/Index.aspx'
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ Robokassa.

    Args:
        merchant_login (str): –õ–æ–≥–∏–Ω –º–µ—Ä—á–∞–Ω—Ç–∞.
        merchant_password_1 (str): –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.
        cost (decimal.Decimal): –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.
        number (int): –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
        is_test (int): –§–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (0 - —Ä–µ–∞–ª—å–Ω—ã–π, 1 - —Ç–µ—Å—Ç–æ–≤—ã–π).
        robokassa_payment_url (str): URL Robokassa.

    Returns:
        str: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    signature = calculate_signature(merchant_login, cost, number, merchant_password_1)

    data = {
        'MerchantLogin': merchant_login,
        'OutSum': cost,
        'InvId': number,
        'Description': description,
        'SignatureValue': signature,
        'IsTest': is_test
    }
    return f'{robokassa_payment_url}?{parse.urlencode(data)}'


def handle_payment(data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞, –≤–∫–ª—é—á–∞—é—â–∏–µ —Å—É–º–º—É, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥–ø–∏—Å—å.
    """
    out_summ = data.get('OutSum')
    invoice_id = data.get('InvId')
    signature = data.get('SignatureValue')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∏
    expected_signature = calculate_signature(out_summ, invoice_id, Config.PASSWORD2)

    if signature.lower() != expected_signature.lower():
        raise ValueError("–ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    chat_id = db_get_chat_id_by_invoice_id(invoice_id)
    bnesim = BnesimApi()
    cli = db_get_cli(chat_id)
    data_default = db_get_all_data(chat_id)
    top_up_data = db_get_all_top_up_data(chat_id)
    iccids_list = bnesim.get_iccids_of_user(cli)
    top_up_flag = db_get_top_up_flag(chat_id)
    username = db_get_username_by_invoice_id(invoice_id)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è CLI
    if cli is None:
        cli = bnesim.activate_user(f"{username}_{chat_id}")
        handle_first_payment_order(cli, chat_id, data_default, bnesim)
    else:
        handle_payment_order(cli, bnesim, data_default, top_up_data, top_up_flag, chat_id, iccids_list)


from bnesim_api import BnesimApi
from config import Config
from db.db_queries import (
    db_update_cli,
    db_clean_data,
    db_clean_top_up_data,
    db_get_product_id
)
from aiogram.types import BufferedInputFile


async def handle_first_payment_order(cli, chat_id, data, bnesim):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç eSIM.

    Args:
        cli (str): CLI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        chat_id (str): ID —á–∞—Ç–∞.
        data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        bnesim (BnesimApi): –≠–∫–∑–µ–º–ø–ª—è—Ä API BNESIM.
    """
    product_id = db_get_product_id(data["country"], data["volume"])
    db_update_cli(chat_id, cli)
    active_esim = bnesim.activate_esim(cli, product_id)
    esim_info = bnesim.get_esim_info(active_esim["iccid"])

    while cli is None or active_esim["qr_code"] is None:
        await asyncio.sleep(1)

    db_clean_data(chat_id)

    await Config.BOT.send_photo(
        chat_id=chat_id,
        photo=BufferedInputFile(active_esim["qr_code"], "png_qr_code.png"),
        caption=(
            "*üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π eSIM!*"
            f"\n\nüìõ *–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π eSIM:* `{data['country'].title()} - {active_esim['iccid'][-4:]}`"
            f"\nüîó *–°—Å—ã–ª–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ iOS:* {esim_info['ios_link'].replace('_', '\\_')}"
            "\n\nüìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:*"
            " [iPhone](https://telegra.ph/Kak-podklyuchit-eSIM-na-iPhone-07-27)"
            " | [Android](https://telegra.ph/Kak-podklyuchit-eSIM-na-Android-08-18)"
            " | [Samsung](https://telegra.ph/Kak-podklyuchit-eSIM-na-Samsung-08-18)"
            "\n\nüèùÔ∏è *–°–ª–æ–∂–Ω–æ—Å—Ç–∏? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ eSIM Unity*"
        )
    )


async def handle_payment_order(cli, bnesim, data, top_up_data, top_up_flag, chat_id, iccids_list):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é eSIM.

    Args:
        cli (str): CLI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        bnesim (BnesimApi): –≠–∫–∑–µ–º–ø–ª—è—Ä API BNESIM.
        data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        top_up_data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
        top_up_flag (bool): –§–ª–∞–≥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
        chat_id (str): ID —á–∞—Ç–∞.
        iccids_list (list): –°–ø–∏—Å–æ–∫ ICCID.
    """
    if top_up_data and len(top_up_data) == 3 and top_up_data["iccid"] in iccids_list["iccids"] and top_up_flag:
        product_id = db_get_product_id(top_up_data["country"], top_up_data["volume"])
        api_response = bnesim.top_up_existing_esim(cli, top_up_data["iccid"], product_id)

        db_clean_top_up_data(chat_id)

        while api_response is None:
            await asyncio.sleep(1)

        await Config.BOT.send_message(
            chat_id=chat_id,
            text=(
                "*üéä –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ eSIM!*"
                f"\n\nüìõ *–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π eSIM:* `{top_up_data['country'].title()} - {top_up_data['iccid'][-4:]}`"
                "\n\nü§ñ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_my_esims –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.*"
            )
        )
    else:
        product_id = db_get_product_id(data["country"], data["volume"])
        active_esim = bnesim.activate_esim(cli, product_id)
        esim_info = bnesim.get_esim_info(active_esim["iccid"])

        while active_esim["qr_code"] is None:
            await asyncio.sleep(1)

        db_clean_data(chat_id)

        await Config.BOT.send_photo(
            chat_id=chat_id,
            photo=BufferedInputFile(active_esim["qr_code"], "png_qr_code.png"),
            caption=(
                "*üéä –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ–π eSIM!*"
                f"\n\nüìõ *–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π eSIM:* `{data['country'].title()} - {active_esim['iccid'][-4:]}`"
                f"\nüîó *–°—Å—ã–ª–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ iOS:* {esim_info['ios_link'].replace('_', '\\_')}"
                "\n\nüìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:*"
                " [iPhone](https://telegra.ph/Kak-podklyuchit-eSIM-na-iPhone-07-27)"
                " | [Android](https://telegra.ph/Kak-podklyuchit-eSIM-na-Android-08-18)"
                " | [Samsung](https://telegra.ph/Kak-podklyuchit-eSIM-na-Samsung-08-18)"
                "\n\nüèùÔ∏è *–°–ª–æ–∂–Ω–æ—Å—Ç–∏? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ eSIM Unity*"
            )
        )
